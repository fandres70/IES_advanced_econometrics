data[1:500,]
reps <- 1000
Phi <- matrix(c(0.5, -1, -0.25, 0.5), nrow=2, byrow = T)
shocks <- matrix(c(rnorm(reps, sd=10), rnorm(reps, sd=10)), ncol=2)
x <- matrix(0, nrow=reps, ncol = 2)
x[1,] <-  shocks[1,]
for (i in 2:reps) {
x[i,] = t(Phi%*%x[i-1,]) + shocks[i,]
}
library(foreach)
library(vars)
library(ggplot2)
library(parallel)
data = data.frame(x)
win = 500
data_temp <- data[(1:win) + i, ]
data_temp
reps <- 1000
Phi <- matrix(c(0.5, -1, -0.25, 0.5), nrow=2, byrow = T)
shocks <- matrix(c(rnorm(reps, sd=10), rnorm(reps, sd=10)), ncol=2)
x <- matrix(0, nrow=reps, ncol = 2)
x[1,] <-  shocks[1,]
for (i in 2:reps) {
x[i,] = t(Phi%*%x[i-1,]) + shocks[i,]
}
library(foreach)
library(vars)
library(ggplot2)
library(parallel)
data = data.frame(x)
win = 500
data
data[1:100,]
i
i <- 1
data_temp <- data[(1:win) + i, ]
data_temp
spilt_var <- do.call(rbind, lapply(1:2, function(i) fevd(VAR(data_temp, p=10, type='none'), n.ahead=40)[[i]][40,]))
spilt_vecm <- do.call(rbind, lapply(1:2, function(i) fevd(vec2var(ca.jo(data_temp, K=10, ecdet= 'none'),r=1), n.ahead=40)[[i]][40,]))
spilt_var
VAR(data_temp, p=10, type='none')
summary(VAR(data_temp, p=10, type='none'))
VAR(data_temp, p=2, type='none')
summary(VAR(data_temp, p=2, type='none'))
vec2var(ca.jo(data_temp, K=2, ecdet= 'none'),r=1)
summary(vec2var(ca.jo(data_temp, K=2, ecdet= 'none'),r=1))
vec2var(ca.jo(data_temp, K=2, ecdet= 'none'),r=1)
str(vec2var(ca.jo(data_temp, K=2, ecdet= 'none'),r=1))
vec2var(ca.jo(data_temp, K=2, ecdet= 'none'),r=1)$A
var <- VAR(data_temp, p=2, type='none')
vecm <- vec2var(ca.jo(data_temp, K=2, ecdet= 'none'),r=1)
str(var)
str(summary(var))
registerDoParallel(2)
system.time({
output <- foreach(i=1:(nrow(x)-win)) %dopar% {
data_temp <- data[(1:win) + i, ]
var <- VAR(data_temp, p=2, type='none')
vecm <- vec2var(ca.jo(data_temp, K=2, ecdet= 'none'),r=1)
#spilt_var <- do.call(rbind, lapply(1:2, function(i) fevd(var, n.ahead=40)[[i]][40,]))
#spilt_vecm <- do.call(rbind, lapply(1:2, function(i) fevd(vecm, n.ahead=40)[[i]][40,]))
list(var, vecm)
}
})
output[[1]]
output[[1]][[1]]
output[[1]][[1]]$X1
str(output[[1]][[1]])
output[[1]][[1]]$varresult$X1
output[[1]][[1]]$varresult$X1$coef
output[[1]][[2]]
output[[1]][[2]]$A1
str(output[[1]][[2]])
output[[1]][[2]]$A
output[[1]][[2]]$A$A1
cbind(output[[1]][[2]]$A$A1, output[[1]][[2]]$A$A2)
output[[i]][[1]]$varresult$X1$coef
coefs <- foreach(i=1:length(output)) %dopar% {
var <- rbind(output[[i]][[1]]$varresult$X1$coef, output[[i]][[1]]$varresult$X2$coef)
vecm <- cbind(output[[1]][[2]]$A$A1, output[[1]][[2]]$A$A2)
list(var, vecm)
}
coefs[[1]]
var <- list()
vecm <- list()
for (i in 1:length(output)) {
var[[i]] <- rbind(output[[i]][[1]]$varresult$X1$coef, output[[i]][[1]]$varresult$X2$coef)
vecm[[i]] <- cbind(output[[1]][[2]]$A$A1, output[[1]][[2]]$A$A2)
}
varget_element <- function(i,j, list) {
out <- c()
for (i in 1:length(list)) {
out <- c(out, list[[1]][i,j])
}
return(out)
}
get_element <- function(i,j, list) {
out <- c()
for (i in 1:length(list)) {
out <- c(out, list[[1]][i,j])
}
return(out)
}
get_element(1,1,var)
get_element <- function(i,j, list) {
out <- c()
for (z in 1:length(list)) {
out <- c(out, list[[z]][i,j])
}
return(out)
}
get_element(1,1,var)
plot(get_element(1,1,var))
plot(get_element(1,1,var), type="l")
plot(get_element(1,1,vecm), type="l")
vecm
for (i in 1:length(output)) {
var[[i]] <- rbind(output[[i]][[1]]$varresult$X1$coef, output[[i]][[1]]$varresult$X2$coef)
vecm[[i]] <- cbind(output[[i]][[2]]$A$A1, output[[1]][[2]]$A$A2)
}
get_element <- function(i,j, list) {
out <- c()
for (z in 1:length(list)) {
out <- c(out, list[[z]][i,j])
}
return(out)
}
plot(get_element(1,1,vecm), type="l")
plot(get_element(1,1,var), type="l")
plot(get_element(1,1,vecm), type="l")
plot(get_element(1,1,var), type="l")
plot(get_element(1,1,vecm), type="l")
plot(get_element(1,1,var), type="l")
plot(get_element(1,1,vecm), type="l")
plot(get_element(1,1,var), type="l")
reps <- 1000
Phi <- matrix(c(0.5, -1, -0.25, 0.5), nrow=2, byrow = T)
shocks <- matrix(c(rnorm(reps, sd=10), rnorm(reps, sd=10)), ncol=2)
x <- matrix(0, nrow=reps, ncol = 2)
x[1,] <-  shocks[1,]
for (i in 2:reps) {
x[i,] = t(Phi%*%x[i-1,]) + shocks[i,]
}
library(foreach)
library(vars)
library(ggplot2)
library(parallel)
data = data.frame(x)
win = 500
registerDoParallel(2)
system.time({
output <- foreach(i=1:(nrow(x)-win)) %dopar% {
data_temp <- data[(1:win) + i, ]
var <- VAR(data_temp, p=2, type='none')
vecm <- vec2var(ca.jo(data_temp, K=2, ecdet= 'none'),r=1)
spilt_var <- do.call(rbind, lapply(1:2, function(i) fevd(var, n.ahead=40)[[i]][40,]))
spilt_vecm <- do.call(rbind, lapply(1:2, function(i) fevd(vecm, n.ahead=40)[[i]][40,]))
list(var, vecm, 1-sum(diag(spilt_var))/sum(spilt_var), 1-sum(diag(spilt_vecm))/sum(spilt_vecm))
}
})
var <- list()
vecm <- list()
spillover_var <- c()
spillover_vecm <- c()
for (i in 1:length(output)) {
var[[i]] <- rbind(output[[i]][[1]]$varresult$X1$coef, output[[i]][[1]]$varresult$X2$coef)
vecm[[i]] <- cbind(output[[i]][[2]]$A$A1, output[[1]][[2]]$A$A2)
spillover_var <- c(spillover_var, output[[i]][[3]])
spillover_vecm <- c(spillover_vecm, output[[i]][[4]])
}
get_element <- function(i,j, list) {
out <- c()
for (z in 1:length(list)) {
out <- c(out, list[[z]][i,j])
}
return(out)
}
output
spillover_var
plot(spillover_var)
plot(spillover_vecm)
plot_coef <- function(i,j) {
data <- data.frame(coef_var = get_element(i,j,var), coef_vecm = get_element)
data$id <- 1:nrow(data)
p <- ggplot(aes(x=id), data = data )
p <- p + geom_line(aes(y = spillover_vecm), size=0.25) + geom_line(aes(y = spillover_var), col="blue", size=0.25, linetype="dotted") + theme_bw() + xlab("") + ylab("Coefficient value")
print(p)
}
plot_coef(1,1)
get_element(1,1,var)
plot_coef <- function(i,j) {
data <- data.frame(coef_var = get_element(i,j,var), coef_vecm = get_element(i,j,vecm))
data$id <- 1:nrow(data)
p <- ggplot(aes(x=id), data = data )
p <- p + geom_line(aes(y = spillover_vecm), size=0.25) + geom_line(aes(y = spillover_var), col="blue", size=0.25, linetype="dotted") + theme_bw() + xlab("") + ylab("Coefficient value")
print(p)
}
plot_coef(1,1)
plot_coef(1,2)
plot_coef(1,1)
plot_coef(1,4)
get_element(1,3,var)
plot(get_element(1,3,var))
plot_coef <- function(i,j) {
data <- data.frame(coef_var = get_element(i,j,var), coef_vecm = get_element(i,j,vecm))
data$id <- 1:nrow(data)
p <- ggplot(aes(x=id), data = data )
p <- p + geom_line(aes(y = coef_vecm), size=0.25) + geom_line(aes(y = coef_var), col="blue", size=0.25, linetype="dotted") + theme_bw() + xlab("") + ylab("Coefficient value")
print(p)
}
plot_coef(1,4)
plot_coef(1,1)
plot_coef(1,2)
plot_coef(1,3)
plot_coef(1,4)
plot_coef(2,1)
plot_coef(2,2)
plot_coef(2,3)
plot_coef(2,4)
plot(get_element(1,3,vecm))
get_element(1,3,vecm)
var <- list()
vecm <- list()
spillover_var <- c()
spillover_vecm <- c()
for (i in 1:length(output)) {
var[[i]] <- rbind(output[[i]][[1]]$varresult$X1$coef, output[[i]][[1]]$varresult$X2$coef)
vecm[[i]] <- cbind(output[[i]][[2]]$A$A1, output[[i]][[2]]$A$A2)
spillover_var <- c(spillover_var, output[[i]][[3]])
spillover_vecm <- c(spillover_vecm, output[[i]][[4]])
}
get_element <- function(i,j, list) {
out <- c()
for (z in 1:length(list)) {
out <- c(out, list[[z]][i,j])
}
return(out)
}
data <- data.frame(spillover_var = spillover_var*100, spillover_vecm = spillover_vecm*100)
data$id <- 1:nrow(data)
p <- ggplot(aes(x=id), data = data )
p <- p + geom_line(aes(y = spillover_vecm), size=0.25) + geom_line(aes(y = spillover_var), col="blue", size=0.25, linetype="dotted") + theme_bw() + xlab("") + ylab("Spillover")
print(p)
plot_coef <- function(i,j) {
data <- data.frame(coef_var = get_element(i,j,var), coef_vecm = get_element(i,j,vecm))
data$id <- 1:nrow(data)
p <- ggplot(aes(x=id), data = data )
p <- p + geom_line(aes(y = coef_vecm), size=0.25) + geom_line(aes(y = coef_var), col="blue", size=0.25, linetype="dotted") + theme_bw() + xlab("") + ylab("Coefficient value")
print(p)
}
plot_coef(1,3)
plot_coef(1,2)
plot_coef(1,1)
plot_coef(1,4)
plot_coef(2,4)
plot_coef(2,3)
plot_coef(2,2)
plot_coef(2,1)
vec2var
?vac2var
?vec2var
Phi
?map
?dot
Phi^2
sum(diag(Phi^2))
sum(diag(Phi^2))/sum(Phi^2)
1- sum(diag(Phi^2))/sum(Phi^2)
x
ca.jo(x)
ca.jo(data.frame(x))
cajorls(ca.jo(data.frame(x)),r=1)
install.packages("plyr")
library(plyr)
?plyr
read.csv('/Users/tomaskrehlik/Downloads/TOTPRODUCTION.csv')
read.csv('/Users/tomaskrehlik/Downloads/TOTPRODUCTION.csv', header=T)
data = read.csv('/Users/tomaskrehlik/Downloads/TOTPRODUCTION.csv', header=T)
str(data)
data = read.csv('/Users/tomaskrehlik/Downloads/TOTPRODUCTION.csv', header=T)
data
str(data)
?ddply
ddply(data, .(Group), mean)
ddply(data, .(Group), mean_rbi = mean(rbi, na.rm = TRUE))
ddply(data, .(Group), summarize)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
?melt
library(reshape)
?melt
melt(data)
ddply(melt(data),.(Group),mean(value, na.rm=T))
data_2 <- melt(data)
str(data_2)
ddply(data_2,.(Group),mean(value, na.rm=T))
names(data_2)
ddply(data_2,.(Group),mean = mean(value, na.rm=T))
ddply(data_2,.(Group),summarize,mean = mean(value, na.rm=T))
ddply(data_2,.(Group, variable),summarize,mean = sum(value, na.rm=T))
data
data$Country==Yemen
data$Country=="Yemen"
data$Country
data[c(TRUE, FALSE), ]
data[c(TRUE, FALSE, FALSE), ]
?select
?subest
?subset
subset(data, Country="Yemen")
subset(data, Country=="Yemen")
data[data$Country=="Yemen",]
subset
getAnywhere(subset)
?melt
melt(data, id.vars=c("Country", "Group"), variable_name= "Year")
melt(data, id.vars=c("Country", "Group"), variable_name= "Year")$Year
as.integer(melt(data, id.vars=c("Country", "Group"), variable_name= "Year")$Year)
strsplit(melt(data, id.vars=c("Country", "Group"), variable_name= "Year")$Year, ".")
data_melted
data_melted <- melt(data, id.vars=c("Country", "Group"), variable_name= "Year")
as.character(data_melted$Year)
strsplit(as.character(data_melted$Year),".")
strsplit(as.character(data_melted$Year),"\.")
strsplit(as.character(data_melted$Year),'\.')
strsplit(as.character(data_melted$Year),'.')
strsplit(as.character(data_melted$Year),"\\.")
do.call(rbind, strsplit(as.character(data_melted$Year),"\\."))
do.call(rbind, strsplit(as.character(data_melted$Year),"\\."))[,1]
strsplit(do.call(rbind, strsplit(as.character(data_melted$Year),"\\."))[,1],"X")
do.call(rbind, strsplit(do.call(rbind, strsplit(as.character(data_melted$Year),"\\."))[,1],"X"))[,2]
as.integer(do.call(rbind, strsplit(do.call(rbind, strsplit(as.character(data_melted$Year),"\\."))[,1],"X"))[,2])
strings <- as.character(data_melted$Year) # Convert the factors to strings
# Now note that the strings have particular structure, we dont need anything behind the "." so I split the string by it
list1 <- strsplit(strings,"\\.")
do.call(rbind, list1)
list1 <- do.call(rbind, list1) # It essentially calls rbind function over the list
list1 <- list1[,1] # Select only first part
strsplit(list1, "X")
do.call(rbind, strsplit(list1, "X"))
do.call(rbind, strsplit(list1, "X"))[,2]
as.integer(do.call(rbind, strsplit(list1, "X"))[,2])
strings <- as.character(data_melted$Year) # Convert the factors to strings
# Now note that the strings have particular structure, we dont need anything behind the "." so I split the string by it
list1 <- strsplit(strings,"\\.") # The result is list with first entry that intrest us and the rest that does not
# Lets first make it an array. (This code is esotheric, but usefull for converting lists to arrays.)
list1 <- do.call(rbind, list1) # It essentially calls rbind function over the list
list1 <- list1[,1] # Select only first part
# Again we can split by "X"
list2 <- strsplit(list1, "X")
list2 <- do.call(rbind, list2)
list2
list2 <- list2[,2]
years <- as.integer(list2)
data_melted$Years
data_melted$Year
View(data_melted)
data_melted
View(data_melted)
source('~/.active-rstudio-document', echo=TRUE)
data$Country=="Yemen"
library(reshape)
data_melted <- melt(data, id.vars=c("Country", "Group"), variable_name= "Year")
head(data_melted)
names(data_melted) <- c("Country", "Group", "Year", "Production")
head(data_melted)
strings <- as.character(data_melted$Year) # Convert the factors to strings
# Now note that the strings have particular structure, we dont need anything behind the "." so I split the string by it
list1 <- strsplit(strings,"\\.") # The result is list with first entry that intrest us and the rest that does not
# Lets first make it an array. (This code is esotheric, but usefull for converting lists to arrays.)
list1 <- do.call(rbind, list1) # It essentially calls rbind function over the list
list1 <- list1[,1] # Select only first part
# Again we can split by "X"
list2 <- strsplit(list1, "X")
list2 <- do.call(rbind, list2)
list2 <- list2[,2]
year <- as.integer(list2)
data_melted$Year <- year # R is case sensitive!!!!
head(data_melted)
library(plyr)
ddply(data_melted, .(Year, Group), summarize, mean = mean(Production, na.rm=T))
bla_function <- function(vector) {
return(max(vector, na.rm=T)%%100) # Do the reminder of division by 100 from max value
}
ddply(data_melted, .(Year, Group), summarize, aa = bla_function(Production))
data_melted
temp <- subset(data_melted, Country == "Brazil")
plot(temp$Year, temp$Production, type="p")
plot(temp$Year, temp$Production, type="l")
plot(temp$Year, temp$Production, type="h")
data_melted
library(ggplot2)
plot <- ggplot(aes(x=Year, y=mean(Production), data=data_melted))
plot + geom_point()
library(ggplot2)
plot <- ggplot(aes(x=Year, y=mean(Production)), data=data_melted)
plot + geom_point()
library(ggplot2)
plot <- ggplot(aes(x=Year, y=mean), data=ddply(data_melted, .(Year), summarize, mean = mean(Production, na.rm=T)))
plot + geom_point()
plot <- ggplot(aes(x=Year, y=Production))
plot + geom_boxplot()
?geom_boxplot
plot <- ggplot(aes(x=factor(Year), y=Production))
plot + geom_boxplot()
plot <- ggplot(aes(x=factor(Year), y=Production), data=data_melted)
plot + geom_boxplot()
plot <- ggplot(aes(x=factor(Year), y=Production), data=data_melted)
plot + geom_point(aes(colour=Country))
plot <- ggplot(aes(x=factor(Year), y=Production), data=data_melted)
plot + geom_line(aes(colour=Country))
plot <- ggplot(aes(x=Year, y=Production), data=data_melted)
plot + geom_line(aes(colour=Country))
plot <- ggplot(aes(x=Year, y=Production), data=data_melted)
plot + geom_points(aes(colour=Country))
plot <- ggplot(aes(x=Year, y=Production), data=data_melted)
plot + geom_point(aes(colour=Country))
plot <- ggplot(aes(x=factor(Year), y=Production), data=data_melted)
plot + geom_jitter(aes(colour=Country))
plot <- ggplot(aes(x=factor(Year), y=Production), data=data_melted)
plot + facet_grid(Group~.) geom_jitter(aes(colour=Country))
plot <- ggplot(aes(x=factor(Year), y=Production), data=data_melted)
plot + facet_grid(Group~.) + geom_jitter(aes(colour=Country))
plot <- ggplot(aes(x=factor(Year), y=Production), data=data_melted)
plot + facet_grid(Group~.) + geom_jitter(aes(colour=Country)) + scale_y_log10()
plot <- ggplot(aes(x=factor(Year), y=Production), data=data_melted)
plot + facet_grid(Group~.) + geom_boxplot() + scale_y_log10()
setwd('/Users/tomaskrehlik/Documents/PHD/Advanced Econometrics/Seminars/0 - Introduction to R/Programming concepts/')
# Set a scalar
x <- 10
# Set a matrix
M <- matrix(c(1,2,3,4,5,6,7,8,9), byrow=T, ncol=3)
# Set a vector
v <- c(3,4,5)
# Summing and multiplying scalars
x*x
x^3
x+x
# etc...
M%*%M # Matrix multiplication is %*%
M%*%v # Multiply by scalar
for (i in 1:5) {
print(i)
}
for (i in c("auto","motorka")) {
print(i)
}
i <- 2
while (i < 100) {
i <- i^2
print(i)
}
i <- 100
if (i > 100) {
print("i is bigger than 100.")
} else {
print("i is lower or equal to 100.")
}
i <- 101
if (i > 100) {
print("i is bigger than 100.")
} else {
print("i is lower or equal to 100.")
}
str(data_melted)
names(data_melted)
names(data_melted)[1] <- "country"
names(data_melted)
names(data_melted)
data_melted$country
install.packages(c("forecast", "gmp", "Rmpfr", "snow"))
mtcars
p <- ggplot(mtcars, aes(wt, mpg))
library(ggplot2)
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(aes(colour = qsec))
data_melted$Country
data_melted
data_melted$country
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
require(markdown)
markdownToHTML(inputFile, outputFile, stylesheet='custom.css')
}
)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
source('~/Documents/PHD/Advanced Econometrics/Seminars/style/style.R', echo=TRUE)
